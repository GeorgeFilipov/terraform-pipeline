name: 'Terraform'

# Were we can define the inputs that our action will accept
inputs:
  AZURE_CLIENT_ID: 
    required: true
  AZURE_CLIENT_SECRET:
    required: true
  AZURE_SUBSCRIPTION_ID:
    required: true
  AZURE_TENANT_ID:
    required: true
  version: 
    required: true
  namespace:
    required: true

env:
    ARM_CLIENT_ID: ${{ inputs.AZURE_CLIENT_ID }}
    ARM_CLIENT_SECRET: ${{ inputs.AZURE_CLIENT_SECRET }}
    ARM_SUBSCRIPTION_ID: ${{ inputs.AZURE_SUBSCRIPTION_ID }}
    ARM_TENANT_ID: ${{ inputs.AZURE_TENANT_ID }}

runs-on: ubuntu-latest
environment: production

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash

steps:
# Checkout the repository to the GitHub Actions runner
- name: Checkout
  uses: actions/checkout@v3

# Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
- name: Setup Terraform
  uses: hashicorp/setup-terraform@v2

# Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
- name: Terraform Init
  run: terraform init

# Generates an execution plan for Terraform
- name: Terraform Plan
  run: terraform plan -input=false

  # On push to "main", build or change infrastructure according to Terraform configuration files
- name: Terraform Apply
  # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
  run: terraform apply -auto-approve -input=false